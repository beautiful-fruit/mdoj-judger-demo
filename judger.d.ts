/* this code was generated by automated tool,
   should not edit by hand */

export interface Judger {
  Judge(request: JudgeRequest): AsyncGenerator<JudgeResponse>;
  JudgerInfo(request: google.protobuf.Empty): Promise<JudgeInfo>;
  Exec(request: ExecRequest): AsyncGenerator<ExecResult>;
}

export interface JudgeRequest {
  langUid: string;
  code: Uint8Array;
  memory: number;
  time: number;
  rule: JudgeMatchRule;
  tests?: TestIO[];
}

export interface ExecRequest {
  langUid: string;
  code: Uint8Array;
  memory: number;
  time: number;
  input: Uint8Array;
}

export interface Log {
  level: number;
  msg: string;
}

export interface ExecResult {
  output?: Uint8Array;
  log?: Log;
}

export interface TestIO {
  input: Uint8Array;
  output: Uint8Array;
}

export interface JudgeResponse {
  status: JudgerCode;
  time: number;
  memory: number;
  accuracy: number;
}

export type JudgerCode =
  | "RE"
  | "NA"
  | "WA"
  | "CE"
  | "AC"
  | "RF"
  | "TLE"
  | "MLE"
  | "OLE"
  | string;

export type JudgeMatchRule = "ExactSame" | "IgnoreSNL" | "SkipSNL" | string;

export interface Langs {
  list?: LangInfo[];
}

export interface LangInfo {
  langUid: string;
  langName: string;
  info: string;
  langExt: string;
}

export interface JudgeInfo {
  memory: number;
  accuracy: number;
  langs: Langs;
  cpuFactor: float;
}
